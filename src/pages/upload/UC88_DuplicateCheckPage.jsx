import React, { useState, useCallback } from 'react';
// import { useDropzone } from 'react-dropzone'; // <-- X√ìA D√íNG N√ÄY
import { 
    App,
    Upload, // <-- ƒê·∫£m b·∫£o ƒë√£ import
    Spin, 
    Row, 
    Col, 
    Card, 
    Alert, 
    Typography, 
    Button, 
    Space,
    InputNumber,
    Radio,
    Result,
    Divider,
    Form // <-- Import Form
} from 'antd';
import { 
    FileSearchOutlined,
    UploadOutlined,
    RedoOutlined,
    FilePdfOutlined,
    FileDoneOutlined,
    WarningFilled,
    DownloadOutlined
} from '@ant-design/icons';

// --- Mock API Import ---
import { mockDeepDuplicateCheck } from '../../api/mockUploadApi';

// --- Component Imports (ƒê√É ƒê∆Ø·ª¢C REFACTOR) ---
import DuplicateDetails from '../../components/dms/upload/DuplicateDetails';
import StatisticsTable from '../../components/dms/upload/StatisticsTable';

const { Title, Paragraph, Text } = Typography;
const { Dragger } = Upload; // <-- D√πng Dragger c·ªßa Antd

// --- Main Page Component ---
const UC88_DuplicateCheckPage = () => {
    const [file, setFile] = useState(null);
    const [isProcessing, setIsProcessing] = useState(false);
    const [result, setResult] = useState(null);
    const [error, setError] = useState(null);
    const [threshold, setThreshold] = useState(30); 
    const [method, setMethod] = useState('fast'); 

    const { message } = App.useApp();

    const handleReset = () => {
        setFile(null);
        setIsProcessing(false);
        setResult(null);
        setError(null);
    };
    
    // --- S·ª¨A L·ªñI ·ªû ƒê√ÇY ---
    // 1. X√≥a b·ªè onDrop v√† hook useDropzone
    // const onDrop = useCallback((acceptedFiles) => { ... }, []);
    // const { getRootProps, getInputProps, isDragActive } = useDropzone({ ... });
    
    // 2. T·∫°o h√†m beforeUpload cho Antd
    const handleBeforeUpload = (selectedFile) => {
        handleReset();
        setFile(selectedFile);
        return false; // Quan tr·ªçng: NgƒÉn Antd t·ª± ƒë·ªông upload
    };
    // --- K·∫æT TH√öC S·ª¨A L·ªñI ---


    const handleCheck = () => {
        if (!file) {
            message.error("Vui l√≤ng ch·ªçn m·ªôt file ƒë·ªÉ ki·ªÉm tra.");
            return;
        }
        setIsProcessing(true);
        setResult(null);
        setError(null);

        message.loading({ content: 'ƒêang ph√¢n t√≠ch s√¢u v√† ƒë·ªëi chi·∫øu to√†n b·ªô CSDL...', key: 'check', duration: 0 });

        mockDeepDuplicateCheck(file)
            .then((apiResult) => {
                setResult(apiResult);
                setIsProcessing(false);
                message.success({ content: 'Ph√¢n t√≠ch ho√†n t·∫•t!', key: 'check' });
            })
            .catch((err) => {
                setError(err.message || 'ƒê√£ c√≥ l·ªói x·∫£y ra.');
                setIsProcessing(false);
                message.error({ content: 'Ph√¢n t√≠ch th·∫•t b·∫°i.', key: 'check' });
            });
    }
    
    return (
        <div style={{ maxWidth: 1000, margin: '0 auto' }}>
            <div style={{ textAlign: 'center', marginBottom: 40 }}>
                <Title level={2} style={{ fontWeight: 800 }}>
                    <FileSearchOutlined style={{ color: '#1677ff' }} /> UC-88: Ki·ªÉm Tra Tr√πng L·∫∑p VƒÉn B·∫£n
                </Title>
                <Paragraph style={{ fontSize: '16px' }} type="secondary">
                    Ph√¢n t√≠ch s√¢u ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t c·ªßa t√†i li·ªáu trong h·ªá th·ªëng.
                </Paragraph>
            </div>
            
            <Card>
                {!result && !error && ( // Th√™m ƒëi·ªÅu ki·ªán !error
                    <Spin spinning={isProcessing} tip="ƒêang ph√¢n t√≠ch...">
                        <Row gutter={[24, 24]} align="middle">
                            <Col xs={24} md={12}>
                                {/* B·ªçc trong Form.Item ƒë·ªÉ c√≥ label */}
                                <Form.Item label="T·∫£i l√™n vƒÉn b·∫£n c·∫ßn ki·ªÉm tra:" required style={{marginBottom: 0}}>
                                    {/* --- S·ª¨A L·ªñI ·ªû ƒê√ÇY --- */}
                                    <Dragger 
                                        // {...getRootProps()} // <-- X√ìA D√íNG N√ÄY
                                        beforeUpload={handleBeforeUpload} // <-- TH√äM PROP N√ÄY
                                        multiple={false} // <-- TH√äM PROP N√ÄY
                                        showUploadList={false} // <-- TH√äM PROP N√ÄY
                                        disabled={isProcessing} // <-- Gi·ªØ nguy√™n
                                        style={{ 
                                            padding: '24px', 
                                            backgroundColor: '#fafafa' // <-- X√≥a isDragActive
                                        }}
                                    >
                                        <p className="ant-upload-drag-icon">
                                            <UploadOutlined />
                                        </p>
                                        {file ? (
                                            <>
                                                <p className="ant-upload-text" style={{color: '#1677ff', fontWeight: 600}}>{file.name}</p>
                                                <p className="ant-upload-hint">Click ho·∫∑c k√©o file kh√°c ƒë·ªÉ thay th·∫ø</p>
                                            </>
                                        ) : (
                                            <>
                                                <p className="ant-upload-text">K√©o th·∫£ file ho·∫∑c click ƒë·ªÉ ch·ªçn</p>
                                                <p className="ant-upload-hint">H·ªó tr·ª£: PDF, DOCX, TXT</p>
                                            </>
                                        )}
                                    </Dragger>
                                    {/* --- K·∫æT TH√öC S·ª¨A L·ªñI --- */}
                                </Form.Item>
                            </Col>
                            <Col xs={24} md={12}>
                                <Form layout="vertical"> {/* Th√™m Form ƒë·ªÉ c√°c Form.Item c√≥ layout */}
                                    <Form.Item label="Ng∆∞·ª°ng ph√°t hi·ªán (%):" style={{ margin: 0 }}>
                                        <InputNumber 
                                            value={threshold} 
                                            onChange={setThreshold} 
                                            min={10} max={100} 
                                            style={{ width: '100%' }} 
                                            size="large"
                                        />
                                    </Form.Item>
                                    <Form.Item label="Ph∆∞∆°ng ph√°p so s√°nh:" style={{ margin: 0, marginTop: 16 }}>
                                        <Radio.Group 
                                            value={method} 
                                            onChange={(e) => setMethod(e.target.value)}
                                            optionType="button"
                                            buttonStyle="solid"
                                            style={{ width: '100%' }}
                                        >
                                            <Radio.Button value="fast" style={{ width: '50%', textAlign: 'center' }}>‚ö°Ô∏è Th∆∞·ªùng (Nhanh)</Radio.Button>
                                            <Radio.Button value="deep" style={{ width: '50%', textAlign: 'center' }}>üß† S√¢u (Ch√≠nh x√°c)</Radio.Button>
                                        </Radio.Group>
                                    </Form.Item>
                                </Form>
                            </Col>
                        </Row>
                        <Divider />
                        <div style={{ textAlign: 'center' }}>
                            <Button 
                                type="primary" 
                                size="large" 
                                icon={<FileSearchOutlined />}
                                onClick={handleCheck} 
                                disabled={isProcessing || !file}
                            >
                                Ki·ªÉm tra ngay
                            </Button>
                            <Paragraph type="secondary" style={{fontSize: 12, marginTop: 8}}>
                                L∆∞u √Ω: Ch·ªâ file c√≥ t√™n "Dupli-Document" m·ªõi ƒë∆∞·ª£c gi·∫£ l·∫≠p l√† c√≥ tr√πng l·∫∑p.
                            </Paragraph>
                        </div>
                    </Spin>
                )}
                
                {result && !isProcessing && (
                    <div>
                        <Result
                            status={result.hasDuplicates ? "error" : "success"}
                            title={result.hasDuplicates ? "Ph√°t hi·ªán tr√πng l·∫∑p!" : "Kh√¥ng ph√°t hi·ªán tr√πng l·∫∑p"}
                            subTitle={result.hasDuplicates ? result.message : "T√†i li·ªáu n√†y l√† duy nh·∫•t trong h·ªá th·ªëng."}
                            icon={result.hasDuplicates ? <WarningFilled /> : <FileDoneOutlined />}
                            extra={[
                                <Button 
                                    type="primary" 
                                    key="redo" 
                                    icon={<RedoOutlined />}
                                    onClick={handleReset}
                                >
                                    Ki·ªÉm tra file kh√°c
                                </Button>,
                                <Button 
                                    key="report" 
                                    icon={<DownloadOutlined />}
                                    disabled={!result.hasDuplicates}
                                >
                                    T·∫£i b√°o c√°o PDF
                                </Button>,
                            ]}
                        >
                            {result.hasDuplicates && (
                                <div style={{ textAlign: 'left', maxWidth: 800, margin: '0 auto' }}>
                                    <StatisticsTable duplicates={result.duplicates} />
                                    <DuplicateDetails duplicates={result.duplicates} />
                                </div>
                            )}
                        </Result>
                    </div>
                )}

                {error && (
                    <Result
                        status="error"
                        title="Ph√¢n t√≠ch th·∫•t b·∫°i"
                        subTitle={error}
                        extra={[
                            <Button type="primary" key="redo" icon={<RedoOutlined />} onClick={handleReset}>
                                Th·ª≠ l·∫°i
                            </Button>
                        ]}
                    />
                )}
            </Card>
        </div>
    );
};

export default UC88_DuplicateCheckPage;